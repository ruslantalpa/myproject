version: '2'
services:

  ### DB START
  # This is the database to which the all the other components in the stack will connect and interact with
  # (but mostly it's PostgREST that is going to be responsible for the bulk of the db traffic)
  # Having the database in a container is very convenient in development but in production you will
  # use a separate database instance, like Amazon RDS, i.e. in production this section will be
  # commented and in the .env file you will specify the ip of your separate database instance
  db:
    image: postgres:${PG_VERSION}
    ports:
      - "5432:5432"
    environment:
      # the values are defined in the .env file
      # env vars specific to postgres image used on first boot
      - POSTGRES_USER=${SUPER_USER}
      - POSTGRES_PASSWORD=${SUPER_USER_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      # env vars useful for our sql scripts
      - SUPER_USER=${SUPER_USER}
      - SUPER_USER_PASSWORD=${SUPER_USER_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_ANON_ROLE=${DB_ANON_ROLE}
      - DEVELOPMENT=${DEVELOPMENT}
      - JWT_SECRET=${JWT_SECRET}

    volumes:
      - "./db/src:/docker-entrypoint-initdb.d"
  ### DB END

  # PostgREST instance, is responsible for communicating with the database
  # and providing a REST api, (almost) every request that is sent to the database goes through it
  postgrest:
    image: subzerocloud/postgrest-development # this is a development image limited to 1 database connection in the pool
    # for production use the image below (you'll need a 'On Premise' subscription)
    # image: registry.subzero.cloud/postgrest
    ports:
      - "3000:3000"
    links:
      - db:db
    environment:
      # the values are defined in the .env file
      - PGRST_DB_URI=postgres://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}
      - PGRST_DB_SCHEMA=${DB_SCHEMA} 
      - PGRST_DB_ANON_ROLE=${DB_ANON_ROLE}
      - PGRST_DB_POOL=${DB_POOL}
      - PGRST_DB_POOL_TIMEOUT=${PGRST_DB_POOL_TIMEOUT}
      - PGRST_JWT_SECRET=${JWT_SECRET}  
      - PGRST_MAX_ROWS=${MAX_ROWS} 
      - PGRST_PRE_REQUEST=${PRE_REQUEST}
      - PGRST_SERVER_PROXY_URI=${SERVER_PROXY_URI}
      - PGRST_CUSTOM_RELATIONS=${PGRST_CUSTOM_RELATIONS}
    depends_on:
      - db

  # OpenResty (Nginx + Lua) instance that sits in front of PostgREST.
  # All the requests coming into the system are first hitting this component.
  # After some processing/checks and transformation, the request is forwarded
  # to PostgREST down the stack.
  openresty:
    image: subzerocloud/openresty-development
    # for production use the image below (you'll need a 'On Premise' subscription)
    # image: registry.subzero.cloud/openresty
    command: ["/usr/bin/openresty", "-g", "daemon off; error_log /dev/stderr info;"]
    ports:
      - "8080:80"
    links:
      - db:db
      - postgrest:postgrest
      - rabbitmq:rabbitmq
      # - redis:redis
    environment:
      # the values are defined in the .env file
      - JWT_SECRET=${JWT_SECRET}
      - DEVELOPMENT=${DEVELOPMENT}
      - POSTGREST_HOST=${POSTGREST_HOST}
      - POSTGREST_PORT=${POSTGREST_PORT}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_SCHEMA=${DB_SCHEMA}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - ENABLE_CACHE=${ENABLE_CACHE}
      - RELAY_ID_COLUMN=${RELAY_ID_COLUMN}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - REDIS_USER=${REDIS_USER}
      - REDIS_PASS=${REDIS_PASS}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    volumes:
      - "./openresty/nginx/cors.conf:/usr/local/openresty/nginx/conf/cors.conf"
      - "./openresty/nginx/graphql.conf:/usr/local/openresty/nginx/conf/graphql.conf"
      - "./openresty/nginx/nginx.conf:/usr/local/openresty/nginx/conf/nginx.conf"
      - "./openresty/nginx/rabbitmq.conf:/usr/local/openresty/nginx/conf/rabbitmq.conf"
      - "./openresty/nginx/redis.conf:/usr/local/openresty/nginx/conf/redis.conf"
      - "./openresty/nginx/rest.conf:/usr/local/openresty/nginx/conf/rest.conf"
      - "./openresty/html:/usr/local/openresty/nginx/html"
      - "./openresty/lua:/usr/local/openresty/lualib/user_code"
    depends_on:
      - postgrest

  # pg-event-proxy instance is responsible for forwarding NOTIFY or WAL events in PostgreSQL
  # to and upstream server, current supported upstream protocols are
  # amqp 0.9 (RabbitMQ)
  # mqtt (Apache ActiveMQ, Cassandana, HiveMQ, Mosquitto, RabbitMQ, AWS IoT, Amazon MQ, ...)
  # redis
  # more information about this component at https://github.com/subzerocloud/pg-event-proxy-example
  pg_event_proxy:
    image: subzerocloud/pg-event-proxy-development
    # for production use the image below (you'll need a 'On Premise' subscription)
    # image: registry.subzero.cloud/pg-event-proxy
    links:
      - db
      - rabbitmq
    environment:
      - RUST_LOG=pg_event_proxy=debug # output forwarded messages, use "info" for production
      - PGPROXY_DATABASE-URI=postgres://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}
      # these configurations are only used when streaming WAL, the example below are the default values, uncomment only if you need to change them
      # - PGPROXY_DATABASE-REPLICATION_SLOT=pg_event_proxy 
      # - PGPROXY_DATABASE-WAL2JSON_PARAMS=\"format-version\" '2' , \"include-types\" '0'

      # Configuration for RabbitMQ upstream
      - PGPROXY_UPSTREAM-MYAMQP-KIND=amqp
      - PGPROXY_UPSTREAM-MYAMQP-URI=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq//
      # format of "BRIDGE_CHANNELS" config is as follows
      # pgchannel1->exchange:topic_exchange_name, pgchannel2->queue:queue_name, pgchannel3->topic:topic_name
      # "wal2json" has a special meaning when used as a value for pgchannel
      # in this case the replication events (WAL) will be streamed (as opposed to events from NOTIFY wal2json, ... query)
      # for example "wal2json->exchange:amqp.topic" will stream WAL to "amqp.topic" exchange
      # when streaming WAL, the database user needs to have REPLICATION privilege (see db/src/authorization/roles.sql)
      - PGPROXY_UPSTREAM-MYAMQP-BRIDGE_CHANNELS=events->exchange:amq.topic

      # Configuration for Redis upstream
      # - PGPROXY_UPSTREAM-MYREDIS-KIND=redis
      # - PGPROXY_UPSTREAM-MYREDIS-URI=redis://default:${REDIS_PASS}@redis
      # - PGPROXY_UPSTREAM-MYREDIS-BRIDGE_CHANNELS=events->topic:events
      

    depends_on:
      - db

  # RabbitMQ instance can be used to consolidate events that originated in your database/application.
  # You can connect here with different consumers and take actions based on those events (like sending signup emails)
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5671:5671"
      - "5672:5672"
      - "15672:15672"
      - "15674:15674"
    entrypoint: /entrypoint.sh
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_AUTH_ENDPOINT=${RABBITMQ_AUTH_ENDPOINT}
    volumes:
      - "./rabbitmq/entrypoint.sh:/entrypoint.sh"
      - "./rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins"
      - "./rabbitmq/custom.config:/etc/rabbitmq/custom.config.template"
  # Just like with RabbitMQ, you can use Redis as a messaging server,
  # aditionally, it can be used as a central caching backend (see nginx.conf and cache.lua for configuration)
  # redis:
  #   image: "redis:alpine"
  #   ports:
  #     - "6379:6379"
  #   command: redis-server --requirepass ${REDIS_PASS}
